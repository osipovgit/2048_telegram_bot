# -*- coding: utf-8 -*-
import json
from telebot import types
import config
import telebot
import random
import logging
import psycopg2

logging.basicConfig(filename="logger/timekiller_bot.log", level=logging.INFO)
bot = telebot.TeleBot(config.token_timekiller_bot)


def total_count_of_score_on_field(count_end) -> int:
    """
    –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
    :param count_end: –ü–æ–ª–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    :return: (int) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ
    """
    score_now = 0
    for i in range(4):
        for j in range(4):
            score_now += count_end[i][j]
    return score_now


def final_2048(message, score_now):
    """
    –û–±–Ω—É–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª–µ, –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤.
    :param message: (JSON) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param score_now: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
    :return: (int) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ
    """
    with open('params.json', 'r') as f:
        load_json = json.load(f)
    with open('params.json', 'w') as f:
        load_json.update({str(message.chat.id): {
            'game_2048': add_element(config.new_field),
            'username': message.chat.username, 'first_name': message.chat.first_name,
            'last_name': message.chat.last_name,
            'top_score': max(score_now[0], load_json[str(message.chat.id)]['top_score'])}})
        json.dump(load_json, f, indent=2)
        logging.info("User {uname} lose game: 2048 | score: {score}.".format(uname=message.chat.username,
                                                                             score=str(score_now[0])))
        bot.send_message(message.chat.id,
                         "üí¢  GAME OVER  üí¢\nYour score now: " + str(score_now[0]) + "!\nYour top score:" + str(max(
                             score_now[0], load_json[str(message.chat.id)]['top_score'])),
                         reply_markup=update_keyboard_2048(score_now))


def add_element(ae):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.
    1) –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 2 –∏–ª–∏ 4 (4 —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10%);
    2) –ï—Å–ª–∏ –º–µ—Ç–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∫–ª–µ—Ç–∫–∏
    (—è—á–µ–π–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–º–µ—é—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ);
    3) –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤.
    :param ae: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: 1) –ü–æ–ª–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ; 2)  3) ['–∫–æ–ª-–≤–æ –æ—á–∫–æ–≤', 'end_game']
    """
    zero_points = [[], []]  # –•—Ä–∞–Ω–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω—ã 0
    merge = 0  # –•—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π
    for i in range(4):
        for j in range(4):
            if ae[i][j] == 0:
                zero_points[0].append(i)
                zero_points[1].append(j)
            if 0 < j < 3:
                if ae[i][j] == ae[i][j - 1] or ae[i][j] == ae[i][j + 1]:
                    merge += 1
            if 0 < i < 3:
                if ae[i - 1][j] == ae[i][j] or ae[i + 1][j] == ae[i][j]:
                    merge += 1
    if len(zero_points[0]) == 1 and merge == 0:
        i = random.randint(0, len(zero_points[0]) - 1)
        ae[zero_points[0][i]][zero_points[1][i]] = 4 if random.randint(1, 10) == 7 else 2
        return add_element(ae)
    if len(zero_points[0]) == 0 and merge == 0:
        temp = total_count_of_score_on_field(ae) + (4 if random.randint(1, 10) == 7 else 2)
        return [temp, 'end_game']
    else:
        if len(zero_points[0]) != 0:
            i = random.randint(0, len(zero_points[0]) - 1)
            ae[zero_points[0][i]][zero_points[1][i]] = 4 if random.randint(1, 10) == 7 else 2
        return ae


def swap_all(game_2048, move_to):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–ª—è —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–¥–≤–∏–≥ –∏ —Å–ª–∏—è–Ω–∏–µ –≤–ª–µ–≤–æ –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –Ω–∞–∑–∞–¥.
    :param move_to: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª–µ–º
    :param game_2048: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    :return: –ü–æ–ª–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
    """
    if move_to == "move_right":
        game_2048[0][0], game_2048[0][3] = game_2048[0][3], game_2048[0][0]
        game_2048[0][1], game_2048[0][2] = game_2048[0][2], game_2048[0][1]
        game_2048[1][0], game_2048[1][3] = game_2048[1][3], game_2048[1][0]
        game_2048[1][1], game_2048[1][2] = game_2048[1][2], game_2048[1][1]
        game_2048[2][0], game_2048[2][3] = game_2048[2][3], game_2048[2][0]
        game_2048[2][1], game_2048[2][2] = game_2048[2][2], game_2048[2][1]
        game_2048[3][0], game_2048[3][3] = game_2048[3][3], game_2048[3][0]
        game_2048[3][1], game_2048[3][2] = game_2048[3][2], game_2048[3][1]
        return game_2048

    invert = [[0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0]]

    if move_to == "move_up":
        for j in range(4):
            for i in range(4):
                invert[j][i] = game_2048[i][j]
        return invert

    if move_to == "move_down_to":
        for j in range(3, -1, -1):
            for i in range(3, -1, -1):
                invert[3 - j][3 - i] = game_2048[i][j]
        return invert

    if move_to == "move_down_back":
        for j in range(3, -1, -1):
            for i in range(3, -1, -1):
                invert[3 - i][3 - j] = game_2048[j][i]
        return invert


def permutation(game_2048):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–≤–∏–≥ –∏ —Å–ª–∏—è–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ –≤–ª–µ–≤–æ.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–≤–∏–Ω—É—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É - –≤–æ–∑–≤—Ä—è—â–∞–µ—Ç –ø–æ–ª–µ, –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—ã -1.
    :param game_2048: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    :return: –ü–æ–ª—É—á–∏–≤—à–µ–µ—Å—è –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    """
    skip_move = -1
    for i in range(4):
        for j in range(1, 4):
            if game_2048[i][j] == 0 | (
                    game_2048[i][j - 1] != game_2048[i][j] and game_2048[i][j] != 0 and game_2048[i][j - 1] != 0):
                continue
            count = 1
            while (game_2048[i][j - count - 1] == 0 and j > count) or (
                    game_2048[i][j - count - 1] == game_2048[i][j] and j > count and game_2048[i][j - count] == 0):
                count += 1
            if game_2048[i][j - count] == 0:
                game_2048[i][j - count], game_2048[i][j] = game_2048[i][j], game_2048[i][j - count]
                skip_move += 1
            if game_2048[i][j - count] == game_2048[i][j] and game_2048[i][j] != 0:
                game_2048[i][j - count] *= 2
                game_2048[i][j] = 0
                skip_move += 1
                if j == 1:
                    game_2048[i][1], game_2048[i][2] = game_2048[i][2], game_2048[i][1]
                    game_2048[i][2], game_2048[i][3] = game_2048[i][3], game_2048[i][2]
                if j == 2:
                    game_2048[i][2], game_2048[i][3] = game_2048[i][3], game_2048[i][2]
    if skip_move == -1:
        game_2048 = [[-1, -1, -1, -1],
                     [-1, -1, -1, -1],
                     [-1, -1, -1, -1],
                     [-1, -1, -1, -1]]
    return game_2048


def update_keyboard_2048(game_2048):
    if game_2048[1] == 'end_game':
        keyboard = types.ReplyKeyboardMarkup(row_width=1)
        btn = types.KeyboardButton("2Ô∏è‚É£ 0Ô∏è‚É£ 4Ô∏è‚É£ 8Ô∏è‚É£")
        keyboard.add(btn)
    else:
        keyboard = types.ReplyKeyboardMarkup(row_width=4)
        btn00 = types.KeyboardButton(game_2048[0][0])
        btn01 = types.KeyboardButton(game_2048[0][1])
        btn02 = types.KeyboardButton(game_2048[0][2])
        btn03 = types.KeyboardButton(game_2048[0][3])
        btn10 = types.KeyboardButton(game_2048[1][0])
        btn11 = types.KeyboardButton(game_2048[1][1])
        btn12 = types.KeyboardButton(game_2048[1][2])
        btn13 = types.KeyboardButton(game_2048[1][3])
        btn20 = types.KeyboardButton(game_2048[2][0])
        btn21 = types.KeyboardButton(game_2048[2][1])
        btn22 = types.KeyboardButton(game_2048[2][2])
        btn23 = types.KeyboardButton(game_2048[2][3])
        btn30 = types.KeyboardButton(game_2048[3][0])
        btn31 = types.KeyboardButton(game_2048[3][1])
        btn32 = types.KeyboardButton(game_2048[3][2])
        btn33 = types.KeyboardButton(game_2048[3][3])
        btn_left = types.KeyboardButton("‚¨ÖÔ∏è")
        btn_up = types.KeyboardButton("‚¨ÜÔ∏è")
        btn_down = types.KeyboardButton("‚¨áÔ∏è")
        btn_right = types.KeyboardButton("‚û°Ô∏è")

        keyboard.add(btn00, btn01, btn02, btn03)
        keyboard.add(btn10, btn11, btn12, btn13)
        keyboard.add(btn20, btn21, btn22, btn23)
        keyboard.add(btn30, btn31, btn32, btn33)
        keyboard.add(btn_left, btn_up, btn_down, btn_right)
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    logging.info("User {uname} [{fn} {ln}] start bot.".format(uname=message.chat.username, fn=message.chat.first_name,
                                                              ln=message.chat.last_name))
    keyboard = types.ReplyKeyboardMarkup(row_width=4)
    btn1 = types.KeyboardButton("2Ô∏è‚É£ 0Ô∏è‚É£ 4Ô∏è‚É£ 8Ô∏è‚É£")
    keyboard.add(btn1)
    with open('params.json', 'r') as f:
        load_json = json.load(f)
    with open('params.json', 'w') as f:
        load_json.update({str(message.chat.id): {'game_2048': config.new_field,
                                                 'username': message.chat.username,
                                                 'first_name': message.chat.first_name,
                                                 'last_name': message.chat.last_name, 'top_score': 0}})
        json.dump(load_json, f, indent=2)

    bot.send_message(message.chat.id,
                     "Settle down, relax and get comfy because you, my friend... are going nowhere.\n"
                     + "How about we play one more game, " + message.chat.first_name + "?",
                     reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def find_text(message):
    if message.text == '2Ô∏è‚É£ 0Ô∏è‚É£ 4Ô∏è‚É£ 8Ô∏è‚É£':
        logging.info("User {uname} start 2048.".format(uname=message.chat.username))
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        with open('params.json', 'w') as f:
            load_json.update({str(message.chat.id): {
                'game_2048': add_element(config.new_field),
                'username': message.chat.username, 'first_name': message.chat.first_name,
                'last_name': message.chat.last_name, 'top_score': load_json[str(message.chat.id)]['top_score']}})
            json.dump(load_json, f, indent=2)

        with open('params.json', 'r') as f:
            load_json = json.load(f)
        bot.send_message(message.chat.id,
                         "Let's start the game! \n2Ô∏è‚É£ 0Ô∏è‚É£ 4Ô∏è‚É£ 8Ô∏è‚É£\nüìúRules:\n "
                         "You have to combine various tiles starting with a tile of 2 and combining them "
                         "together to reach 2048. The combinations include combining \'2\' tile with \'2\' "
                         "tile to make it into a tile of \'4\' and then combining it with a tile of \'4\' "
                         "to make a tile of \'8\' and so on.\nPress the corresponding arrows on the custom keyboard"
                         " and set a new record!",
                         reply_markup=update_keyboard_2048(load_json[str(message.chat.id)]['game_2048']))

    elif message.text == '‚¨ÖÔ∏è':
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        game_2048 = permutation(load_json[str(message.chat.id)]['game_2048'])

        if game_2048[0][0] == -1:
            game_2048 = load_json[str(message.chat.id)]['game_2048']
            text = "NOPE\nü§õüèºüòàü§úüèº"
        else:
            game_2048 = add_element(game_2048)
            text = "‚¨Ö Move left ‚¨Ö"

        if game_2048[1] == 'end_game':
            final_2048(message, game_2048)
        else:
            with open('params.json', 'r') as f:
                load_json = json.load(f)
            with open('params.json', 'w') as f:
                load_json.update({str(message.chat.id): {
                    'game_2048': game_2048,
                    'username': message.chat.username, 'first_name': message.chat.first_name,
                    'last_name': message.chat.last_name, 'top_score': load_json[str(message.chat.id)]['top_score']}})
                json.dump(load_json, f, indent=2)

            game_2048 = update_keyboard_2048(game_2048)
            bot.send_message(message.chat.id, text, reply_markup=game_2048)

    elif message.text == '‚¨áÔ∏è':
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        game_2048 = swap_all(permutation(swap_all(load_json[str(message.chat.id)]['game_2048'], "move_down_to")),
                             "move_down_back")

        if game_2048[0][0] == -1:
            game_2048 = load_json[str(message.chat.id)]['game_2048']
            text = "NOPE\nü§õüèºüòàü§úüèº"
        else:
            game_2048 = add_element(game_2048)
            text = "‚¨á Move down ‚¨á"

        if game_2048[1] == 'end_game':
            final_2048(message, game_2048)
        else:
            with open('params.json', 'r') as f:
                load_json = json.load(f)
            with open('params.json', 'w') as f:
                load_json.update({str(message.chat.id): {
                    'game_2048': game_2048,
                    'username': message.chat.username, 'first_name': message.chat.first_name,
                    'last_name': message.chat.last_name, 'top_score': load_json[str(message.chat.id)]['top_score']}})
                json.dump(load_json, f, indent=2)

            game_2048 = update_keyboard_2048(game_2048)
            bot.send_message(message.chat.id, text, reply_markup=game_2048)

    elif message.text == '‚¨ÜÔ∏è':
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        game_2048 = swap_all(permutation(swap_all(load_json[str(message.chat.id)]['game_2048'], "move_up")), "move_up")

        if game_2048[0][0] == -1:
            game_2048 = load_json[str(message.chat.id)]['game_2048']
            text = "NOPE\nü§õüèºüòàü§úüèº"
        else:
            game_2048 = add_element(game_2048)
            text = "‚¨ÜÔ∏è Move up ‚¨ÜÔ∏è"

        if game_2048[1] == 'end_game':
            final_2048(message, game_2048)
        else:
            with open('params.json', 'r') as f:
                load_json = json.load(f)
            with open('params.json', 'w') as f:
                load_json.update({str(message.chat.id): {
                    'game_2048': game_2048,
                    'username': message.chat.username, 'first_name': message.chat.first_name,
                    'last_name': message.chat.last_name, 'top_score': load_json[str(message.chat.id)]['top_score']}})
                json.dump(load_json, f, indent=2)

            game_2048 = update_keyboard_2048(game_2048)
            bot.send_message(message.chat.id, text, reply_markup=game_2048)

    elif message.text == '‚û°Ô∏è':
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        game_2048 = permutation(swap_all(load_json[str(message.chat.id)]['game_2048'], "move_right"))
        if game_2048[0][0] == -1:
            game_2048 = swap_all(load_json[str(message.chat.id)]['game_2048'], "move_right")
            text = "NOPE\nü§õüèºüòàü§úüèº"
        else:
            game_2048 = add_element(swap_all(game_2048, "move_right"))
            text = "‚û° Move right ‚û°"

        if game_2048[1] == 'end_game':
            final_2048(message, game_2048)
        else:
            with open('params.json', 'r') as f:
                load_json = json.load(f)
            with open('params.json', 'w') as f:
                load_json.update({str(message.chat.id): {
                    'game_2048': game_2048,
                    'username': message.chat.username, 'first_name': message.chat.first_name,
                    'last_name': message.chat.last_name, 'top_score': load_json[str(message.chat.id)]['top_score']}})
                json.dump(load_json, f, indent=2)

            game_2048 = update_keyboard_2048(game_2048)
            bot.send_message(message.chat.id, text,
                             reply_markup=game_2048)

    elif message.text == '0' or message.text == '2' or message.text == '4' or message.text == '8' \
            or message.text == '16' or message.text == '32' or message.text == '64' or message.text == '128' \
            or message.text == '256' or message.text == '512' or message.text == '1024' or message.text == '2048' \
            or message.text == '4096':
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        bot.send_message(message.chat.id, "I appeal to you to leave the numbers unchanged.",
                         reply_markup=update_keyboard_2048(load_json[str(message.chat.id)]['game_2048']))
    else:
        with open('params.json', 'r') as f:
            load_json = json.load(f)
        bot.send_message(message.chat.id,
                         "To be honest, I don't understand the reasons for such actions...\n"
                         "Don't write to me anymore. JUST PLAY!",
                         reply_markup=update_keyboard_2048(load_json[str(message.chat.id)]['game_2048']))


bot.polling()
